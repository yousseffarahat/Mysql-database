USE M3_School;

# “As a teacher, I should be able to ...”

# 1 - Sign up by providing my first name, middle name,
# last name, birthdate, address, email, and gender.

# the username in this procedure refers to the randomized one that
# will be generated by php and checked here that it's unique

DELIMITER //
CREATE PROCEDURE TeacherSignUp(usrname VARCHAR(50), f_name VARCHAR(50), m_name VARCHAR(50),
                               l_name  VARCHAR(50), bdate DATETIME, addres VARCHAR(100), mail VARCHAR(50),
                               gen     VARCHAR(10), s_id INT)
  BEGIN
    INSERT INTO Employees (username, first_name, middle_name, last_name, birthdate, address, email, gender, school_id)
    VALUES (usrname, f_name, m_name, l_name, bdate, addres, mail, gen, s_id);

    INSERT INTO Teachers (teacher_username, years_of_experience) VALUES (usrname, 0);
  END //
DELIMITER ;

# 2 - View a list of courses’ names I teach categorized by level and grade.

DELIMITER //
CREATE PROCEDURE ViewCoursesTaughtByTeacher(usrname VARCHAR(50))
  BEGIN
    SELECT
      CL.level_id,
      CL.grade,
      CT.course_code
    FROM
      Courses_Taught_In_School_By_Teacher CT INNER JOIN Courses_Offered_By_Levels CL ON CT.course_code = CL.course_code
    WHERE CT.teacher_username = usrname
    ORDER BY level_id ASC, grade ASC;
  END//
DELIMITER ;


# 3 - Post assignments for the course(s) I teach.
# Every assignment has a posting date, due date and content.

DELIMITER //
CREATE PROCEDURE PostAssigmentByTeacher(usrname VARCHAR(50), c_id INT,
                                        s_date  DATETIME, d_date DATETIME, cont TEXT)
  BEGIN
    INSERT INTO Assignments (content, posting_date, due_date, course_code, teacher_username)
    VALUES (cont, s_date, d_date, c_id, usrname);
  END//
DELIMITER ;


# 4 - View the students’ solutions for the assignments I posted ordered by students’ ids.
DELIMITER //
CREATE PROCEDURE TeacherViewAssignmentSolution(usrname VARCHAR(50))
  BEGIN
    SELECT
      student_ssn,
      assignment_id,
      content,
      grade
    FROM Solutions
    WHERE teacher_username = usrname
    ORDER BY student_ssn;
  END//
DELIMITER ;

# 5 - Grade the students’ solutions for the assignments I posted.
DELIMITER //
CREATE PROCEDURE TeacherUpdatesAssignmentGrade(usrname VARCHAR(50), a_id INT, s_ssn INT, gr INT)
  BEGIN
    UPDATE Solutions
    SET grade = gr
    WHERE teacher_username = usrname AND assignment_id = a_id AND student_ssn = s_ssn;
  END//
DELIMITER ;


# 6 - Delete assignments.
DELIMITER //
CREATE PROCEDURE TeacherDeleteAssignment(usrname VARCHAR(50), a_id INT)
  BEGIN
    DELETE FROM Assignments
    WHERE id = a_id AND teacher_username = usrname;
  END//
DELIMITER ;


# 7- Write monthly reports about every student I teach.
# A report is issued on a specific date to a specific student and contains my comment.

DELIMITER //
CREATE PROCEDURE ReportAboutStudentByTeacher(usrname VARCHAR(50), content TEXT, p_date DATETIME, s_ssn INT)
  BEGIN
    IF (s_ssn IN
        (SELECT CTS.student_ssn
         FROM Courses_Taken_By_Students CTS INNER JOIN Courses_Taught_In_School_By_Teacher C
             ON CTS.course_code = C.course_code
         WHERE C.teacher_username = usrname
        ))
    THEN
      INSERT INTO Reports_About_Students (teacher_username, student_ssn, date, teacher_comment)
      VALUES (usrname, s_ssn, p_date, content);
    END IF;
  END//
DELIMITER ;


# 8 - View the questions asked by the students for each course I teach.
DELIMITER //
CREATE PROCEDURE Teacher_View_Questions(usrname VARCHAR(50))
  BEGIN
    SELECT
      Q.id,
      CQS.student_ssn,
      CQS.course_code,
      Q.title,
      Q.content
    FROM Courses_Questions_From_Students CQS INNER JOIN Questions Q ON Q.id = CQS.question_id
      INNER JOIN Courses_Taught_In_School_By_Teacher CTBT ON CQS.course_code = CTBT.course_code
    WHERE CTBT.teacher_username = usrname;
  END//
DELIMITER ;


# 9 - Answer the questions asked by the students for each course I teach.
DELIMITER //
CREATE PROCEDURE Teacher_Answer_Questions(usrname VARCHAR(50), q_id INT, ans TEXT)
  BEGIN
    IF
    EXISTS(
        SELECT Q.id
        FROM Courses_Questions_From_Students CQS INNER JOIN Questions Q ON Q.id = CQS.question_id
          INNER JOIN Courses_Taught_In_School_By_Teacher CTBT ON CQS.course_code = CTBT.course_code
        WHERE CTBT.teacher_username = usrname AND Q.id = q_id
    )
    THEN
      UPDATE Questions
      SET Questions.answer = ans, Questions.teacher_username = usrname
      WHERE Questions.id = q_id;
    END IF;
  END//
DELIMITER ;

# 10 - View a list of students that I teach categorized by the grade
#  and ordered by their name (first name and last name).

DELIMITER //
CREATE PROCEDURE Teacher_list_Students(usrname VARCHAR(50))
  BEGIN
    SELECT
      Children.first_name,
      Children.last_name,
      CL.level_id,
      CL.grade,
      CT.course_code
    FROM
      Courses_Taught_In_School_By_Teacher CT INNER JOIN Courses_Offered_By_Levels CL ON CT.course_code = CL.course_code
      INNER JOIN Courses_Taken_By_Students CTS ON CTS.course_code = CT.course_code
      INNER JOIN Children ON Children.ssn = CTS.student_ssn
    WHERE CT.teacher_username = usrname
    ORDER BY grade ASC, first_name ASC, last_name ASC;
  END//
DELIMITER ;


# 11 - View a list of students that did not join any activity.
DELIMITER //
CREATE PROCEDURE TeacherViewStudentsWithNoActivities()
  BEGIN
    SELECT
      child_ssn,
      first_name,
      last_name
    FROM Students
      INNER JOIN Children ON Students.child_ssn = Children.ssn
    WHERE child_ssn NOT IN (SELECT student_ssn
                            FROM Activities_Participated_In_By_Students);
  END//
DELIMITER ;

# 12 - Display the name of the high school student who
# is currently a member of the greatest number of clubs.
DROP PROCEDURE IF EXISTS ViewStudentWithHighestClubs;
DELIMITER //
CREATE PROCEDURE ViewStudentWithHighestClubs(usrname VARCHAR(50))
  BEGIN

    SELECT
      S.child_ssn,
      C.first_name,
      C.last_name,
      C.age,
      C.gender,
      COUNT(*)
    FROM Students S INNER JOIN Clubs_Joined_By_Students CJS
        ON S.child_ssn = CJS.student_ssn
      INNER JOIN Employees E
        ON S.school_id = E.school_id
      INNER JOIN Children C
        ON C.ssn = S.child_ssn
    WHERE E.username = usrname
    GROUP BY S.child_ssn
    HAVING COUNT(*) = (SELECT max(X)
                       FROM (SELECT count(*) AS X
                             FROM Students S2 INNER JOIN Clubs_Joined_By_Students CJS2
                                 ON S2.child_ssn = CJS2.student_ssn
                               INNER JOIN Employees E2
                                 ON S2.school_id = E2.school_id
                             WHERE E2.username = usrname
                             GROUP BY S2.child_ssn) AS Y);

  END //
DELIMITER ;


